"use strict";(self.webpackChunkcln_plugin_tutorial=self.webpackChunkcln_plugin_tutorial||[]).push([[224],{562:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"rust-tutorial/options","title":"Plugin Options","description":"- Command line options passthrough allows plugins to register their own command","source":"@site/docs/rust-tutorial/options.md","sourceDirName":"rust-tutorial","slug":"/rust-tutorial/options","permalink":"/cln-plugin-tutorial/rust-tutorial/options","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Plugin Options","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"RPC Methods","permalink":"/cln-plugin-tutorial/rust-tutorial/rpc-methods"},"next":{"title":"Events","permalink":"/cln-plugin-tutorial/rust-tutorial/events"}}');var i=t(4848),o=t(8453);const r={title:"Plugin Options",sidebar_position:5},l="Plugin Options",a={},c=[];function d(e){const n={code:"code",h1:"h1",header:"header",input:"input",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"plugin-options",children:"Plugin Options"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Command line options passthrough allows plugins to register their own command\nline options that are exposed through lightningd so that only the main process\nneeds to be configured."}),"\n",(0,i.jsxs)(n.li,{children:["Options can also be passed from the ",(0,i.jsx)(n.code,{children:"config"})," file."]}),"\n",(0,i.jsxs)(n.li,{children:["Option values are not remembered when a plugin is stopped or killed, but can\nbe passed as parameters to ",(0,i.jsx)(n.code,{children:"plugin start"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"exercise-add-an-option-to-your-plugin",children:"Exercise: Add an option to your plugin"}),"\n",(0,i.jsxs)(n.p,{children:["Add this code to your ",(0,i.jsx)(n.code,{children:"main.rs"})," file (hint: insert this before ",(0,i.jsx)(n.code,{children:".dynamic()"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'.option(options::ConfigOption::new(\n    "name",\n    options::Value::String("World".to_string()),\n    "Recipient of the greeting. Defaults to \'World\'",\n))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Next, add a new method ",(0,i.jsx)(n.code,{children:"testmethod_option"})," RPC method to use your option in that call."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'.rpcmethod("testmethod_option", "This is a test", testmethod_option)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'async fn testmethod_option(p: Plugin<()>, _v: serde_json::Value) -> Result<serde_json::Value, Error> {\n    Ok(json!(format!("Hello, {:?}", p.option("name").unwrap())))\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note we renamed ",(0,i.jsx)(n.code,{children:"_p"})," to ",(0,i.jsx)(n.code,{children:"p"})," because we are actually using the plugin state,\nwhich was previously ignored. The plugin state ",(0,i.jsx)(n.code,{children:"p"})," contains our options."]}),"\n",(0,i.jsx)(n.p,{children:"Now let's test!"}),"\n",(0,i.jsx)(n.p,{children:"Rebuild your plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cargo build\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now go to the shell and stop your plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"l1-cli plugin stop rust-plugin\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now start your plugin, inserting a value for your new option:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"l1-cli -k plugin subcommand=start plugin=$(pwd)/target/debug/rust-plugin name='<insert name here>'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now invoke the new ",(0,i.jsx)(n.code,{children:"testmethod_option"})," RPC method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"l1-cli testmethod_option\n"})}),"\n",(0,i.jsx)(n.p,{children:"Try it with various arguments, and see what happens."}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add an option"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test that it works as expected"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);