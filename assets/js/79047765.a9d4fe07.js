"use strict";(self.webpackChunkcln_plugin_tutorial=self.webpackChunkcln_plugin_tutorial||[]).push([[366],{5337:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"python-tutorial/hooks","title":"Hooks","description":"- Synchronous event handler that blocks CLN from processing until it responds","source":"@site/docs/python-tutorial/hooks.md","sourceDirName":"python-tutorial","slug":"/python-tutorial/hooks","permalink":"/cln-plugin-tutorial/python-tutorial/hooks","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Hooks","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Events","permalink":"/cln-plugin-tutorial/python-tutorial/events"},"next":{"title":"Bonus Python","permalink":"/cln-plugin-tutorial/python-tutorial/bonus-python"}}');var t=i(4848),s=i(8453);const l={title:"Hooks",sidebar_position:7},r="Hooks",a={},h=[{value:"Hooks in single mode",id:"hooks-in-single-mode",level:2},{value:"Hooks in chain mode",id:"hooks-in-chain-mode",level:2},{value:"Differences between event stream notifications and hooks",id:"differences-between-event-stream-notifications-and-hooks",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"hooks",children:"Hooks"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Synchronous event handler that blocks CLN from processing until it responds"}),"\n",(0,t.jsx)(n.li,{children:"Allows plugins to be notified about internal events in lightningd and alter its behavior or inject custom behaviors."}),"\n",(0,t.jsx)(n.li,{children:"Hooks are considered to be an advanced feature due to the fact that lightningd relies on the plugin to tell it what to do next."}),"\n",(0,t.jsx)(n.li,{children:"Use them carefully, and make sure your plugins always return a valid response to any hook invocation."}),"\n",(0,t.jsxs)(n.li,{children:["Can execute in either:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u201csingle\u201d mode"}),"\n",(0,t.jsx)(n.li,{children:"\u201cchain\u201d mode"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For a list of all possible hooks, see ",(0,t.jsx)(n.a,{href:"https://docs.corelightning.org/docs/hooks",children:"the Hooks section of the docs"})]}),"\n",(0,t.jsx)(n.h2,{id:"hooks-in-single-mode",children:"Hooks in single mode"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Most hooks are currently set to single-mode."}),"\n",(0,t.jsx)(n.li,{children:"Unless otherwise stated all hooks are single-mode."}),"\n",(0,t.jsx)(n.li,{children:"In this mode only a single plugin can register the hook, and that plugin will get called for each event of that type."}),"\n",(0,t.jsx)(n.li,{children:"If a second plugin attempts to register the hook it gets killed and a corresponding log entry will be added to the logs."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"hooks-in-chain-mode",children:"Hooks in chain mode"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When hooks are registered, they can optionally specify \u201cbefore\u201d and \u201cafter\u201d arrays of plugin names, which control what order they will be called in."}),"\n",(0,t.jsx)(n.li,{children:"If a plugin name is unknown, it is ignored, otherwise if the hook calls cannot be ordered to satisfy the specifications of all plugin hooks, the plugin registration will fail."}),"\n",(0,t.jsx)(n.li,{children:"Multiple plugins can register for the hook type and they are called in any order they are loaded (i.e. cmdline order first, configuration order file second: though note that the order of plugin directories is implementation-dependent), overridden only by before and after requirements the plugin\u2019s hook registrations specify."}),"\n",(0,t.jsx)(n.li,{children:"Each plugin can then handle the event or defer by returning a continue result like the following:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "result": "continue"\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The remainder of the response is ignored and if there are any more plugins that have registered the hook the next one gets called."}),"\n",(0,t.jsx)(n.li,{children:"If there are no more plugins then the internal handling is resumed as if no hook had been called."}),"\n",(0,t.jsx)(n.li,{children:"Any other result returned by a plugin is considered an exit from the chain."}),"\n",(0,t.jsx)(n.li,{children:"Upon exit no more plugin hooks are called for the current event, and the result is executed."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"differences-between-event-stream-notifications-and-hooks",children:"Differences between event stream notifications and hooks"}),"\n",(0,t.jsx)(n.p,{children:"Hooks and notifications are very similar, however there are a few key differences:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Notifications"})," are ",(0,t.jsx)(n.em,{children:"asynchronous"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lightningd"})," will send the notifications but not wait for the plugin to process them."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hooks"}),", on the other hand, are ",(0,t.jsx)(n.em,{children:"synchronous"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lightningd"})," cannot finish processing the event until the plugin has returned."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"For notifications, any number of plugins can subscribe to a notification topic and get notified in parallel"}),"\n",(0,t.jsx)(n.li,{children:"For hooks, only one plugin may register for single-mode hook types"}),"\n",(0,t.jsxs)(n.li,{children:["And, for both single-mode and chain-mode, only one plugin may return a non-continue response","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This avoids having multiple contradictory responses."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"exercise-add-a-single-mode-hook-to-your-plugin",children:"Exercise: Add a single-mode hook to your plugin"}),"\n",(0,t.jsxs)(n.p,{children:["Add this code to your ",(0,t.jsx)(n.code,{children:"helloworld.py"})," file (hint: make sure you insert this before ",(0,t.jsx)(n.code,{children:"plugin.run()"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@plugin.hook(\"htlc_accepted\")\ndef on_htlc_accepted(onion, htlc, plugin, **kwargs):\n    plugin.log('on_htlc_accepted called')\n    time.sleep(20)\n    return {'result': 'continue'}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Also make sure to import the ",(0,t.jsx)(n.code,{children:"time"})," package at the top of your helloworld.py file (after the ",(0,t.jsx)(n.code,{children:"from pyln.client import Plugin"})," line is a good spot):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import time\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now let's test! Go to the shell and start your plugin, this time on Node 2:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"l2-cli plugin start $(pwd)/python-plugin/helloworld.py\n"})}),"\n",(0,t.jsx)(n.p,{children:"Run this command to create a channel between your nodes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"fund_nodes\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create an invoice for Node 1 to pay Node 2 50k sats:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'l2-cli invoice 50000sat test1 "this is the first test"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now copy the resulting bolt11 invoice and paste it into this command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"l1-cli pay <bolt11>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If all went well, the command should hang for 20 seconds while the hook runs. Check Node 2's logs (",(0,t.jsx)(n.code,{children:"l2-log"}),") for the message ",(0,t.jsx)(n.code,{children:"on_htlc_accepted called"})," to verify that your hook was called."]}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add a hook"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test that it works as expected"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var o=i(6540);const t={},s=o.createContext(t);function l(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);