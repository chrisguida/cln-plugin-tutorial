"use strict";(self.webpackChunkcln_plugin_tutorial=self.webpackChunkcln_plugin_tutorial||[]).push([[1],{6939:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rust-tutorial/rpc-methods","title":"RPC Methods","description":"- You can define custom behavior for any lightning-cli method by registering","source":"@site/docs/rust-tutorial/rpc-methods.md","sourceDirName":"rust-tutorial","slug":"/rust-tutorial/rpc-methods","permalink":"/cln-plugin-tutorial/rust-tutorial/rpc-methods","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"RPC Methods","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Life Cycle","permalink":"/cln-plugin-tutorial/rust-tutorial/life-cycle"},"next":{"title":"Plugin Options","permalink":"/cln-plugin-tutorial/rust-tutorial/options"}}');var r=t(4848),i=t(8453);const o={title:"RPC Methods",sidebar_position:4},l="RPC Methods",a={},d=[];function c(e){const n={code:"code",h1:"h1",header:"header",input:"input",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"rpc-methods",children:"RPC Methods"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You can define custom behavior for any ",(0,r.jsx)(n.code,{children:"lightning-cli"})," method by registering\nthat method with ",(0,r.jsx)(n.code,{children:"lightningd"})," in your ",(0,r.jsx)(n.code,{children:"getmanifest"})," response."]}),"\n",(0,r.jsxs)(n.li,{children:["Whenever ",(0,r.jsx)(n.code,{children:"lightning-cli <method> [options]"})," is called, CLN will pass the\nmethod and options back to the plugin, which can handle the call and respond\nhowever it wants."]}),"\n",(0,r.jsx)(n.li,{children:"Can register any number of RPC methods, as long as the method names aren\u2019t\nalready taken."}),"\n",(0,r.jsx)(n.li,{children:"If an RPC method is already taken when the plugin registers the method name,\nthe plugin is killed."}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"exercise-add-an-rpc-method-to-your-plugin",children:"Exercise: Add an RPC method to your plugin"}),"\n",(0,r.jsxs)(n.p,{children:["Add this code to your ",(0,r.jsx)(n.code,{children:"rust-plugin/src/main.rs"})," file (hint: make sure you insert\nthis before ",(0,r.jsx)(n.code,{children:".dynamic()"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'.rpcmethod("testmethod", "This is a test", testmethod)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This registers the ",(0,r.jsx)(n.code,{children:"testmethod"})," rpc method with a handler, also named\n",(0,r.jsx)(n.code,{children:"testmethod"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Now add the ",(0,r.jsx)(n.code,{children:"testmethod"})," rpc handler function (this should go after your main\nfunction, at the bottom of the file):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'async fn testmethod(_p: Plugin<()>, _v: serde_json::Value) -> Result<serde_json::Value, Error> {\n    Ok(json!("Hello"))\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now let's test!"}),"\n",(0,r.jsx)(n.p,{children:"Rebuild your plugin:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"cargo build\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then restart your plugin:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"l1-cli plugin stop rust-plugin && l1-cli plugin start $(pwd)/target/debug/rust-plugin\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now invoke your new RPC method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"l1-cli testmethod\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, let's use the ",(0,r.jsx)(n.code,{children:"serde_json::Value"})," parameter which allows us to pass arguments.\nCreate a new method ",(0,r.jsx)(n.code,{children:"testmethod_argument"})," and register it in your main() function.\nChange ",(0,r.jsx)(n.code,{children:"_v"})," to ",(0,r.jsx)(n.code,{children:"v"})," as it is no longer an unused parameter."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'.rpcmethod("testmethod_argument", "This is a test", testmethod_argument)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'async fn testmethod_argument(p: Plugin<()>, v: serde_json::Value) -> Result<serde_json::Value, Error> {\n  Ok(json!(format!("Hello {}", v)))\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Try it with an argument:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"l1-cli testmethod_argument <your name>\n"})}),"\n",(0,r.jsx)(n.p,{children:"The v argument is passed to our RPC method as json.\nParsing and printing just the string (properly formatted, without escape characters) is left as an exercise to the reader.\nAs a bonus exercise, print an error if more than 1 argument is passed."}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add an RPC method"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test that it works as expected"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);