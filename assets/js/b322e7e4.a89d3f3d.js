"use strict";(self.webpackChunkcln_plugin_tutorial=self.webpackChunkcln_plugin_tutorial||[]).push([[433],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},8462:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"rust-tutorial/events","title":"Events","description":"- Also referred to as \\"Event stream subscriptions\\"","source":"@site/docs/rust-tutorial/events.md","sourceDirName":"rust-tutorial","slug":"/rust-tutorial/events","permalink":"/cln-plugin-tutorial/rust-tutorial/events","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Events","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Plugin Options","permalink":"/cln-plugin-tutorial/rust-tutorial/options"},"next":{"title":"Hooks","permalink":"/cln-plugin-tutorial/rust-tutorial/hooks"}}');var i=t(4848),r=t(8453);const o={title:"Events",sidebar_position:6},c="Event notifications",l={},a=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",input:"input",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"event-notifications",children:"Event notifications"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Also referred to as "Event stream subscriptions"'}),"\n",(0,i.jsx)(n.li,{children:"Asynchronous events"}),"\n",(0,i.jsx)(n.li,{children:"Allow a plugin to subscribe to event topics such that CLN will send the plugin\na push notification whenever events corresponding to such topics occur."}),"\n",(0,i.jsx)(n.li,{children:"For events where it doesn\u2019t matter how many plugins are listening to the event\nor in what order the event is processed."}),"\n",(0,i.jsxs)(n.li,{children:["Topics include:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"channel_opened"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"connect"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"sendpay_success"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"block_added"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For the full list of topics, see\n",(0,i.jsx)(n.a,{href:"https://docs.corelightning.org/docs/event-notifications",children:"the official docs"}),"."]}),"\n",(0,i.jsx)(n.h1,{id:"exercise-add-an-event-stream-subscription-to-your-plugin",children:"Exercise: Add an event stream subscription to your plugin"}),"\n",(0,i.jsxs)(n.p,{children:["Add this code to your ",(0,i.jsx)(n.code,{children:"main.rs"})," file (hint: insert this before ",(0,i.jsx)(n.code,{children:".dynamic()"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'.subscribe("connect", connect_handler)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This registers the plugin to listen for ",(0,i.jsx)(n.code,{children:"connect"})," events and respond with a\nhandler, named ",(0,i.jsx)(n.code,{children:"connect_handler"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Now add the ",(0,i.jsx)(n.code,{children:"connect_handler"})," event notification handler function (this should\ngo after your rpc handler, function, at the bottom of the file):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'async fn connect_handler(_p: Plugin<()>, v: serde_json::Value) -> Result<(), Error> {\n    log::info!("Got a connect notification: {}", v);\n    Ok(())\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now let's test! Go to the shell and rebuild:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cargo build\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now restart your plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"l1-cli plugin stop rust-plugin && \nl1-cli plugin start $(pwd)/target/debug/rust-plugin\n"})}),"\n",(0,i.jsx)(n.p,{children:"Grab Node 1\u2019s pubkey and listening address:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"l1-cli getinfo\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now paste the connection info for Node 1 into this ",(0,i.jsx)(n.code,{children:"connect"})," command from Node\n2:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"l2-cli connect <Node 1\u2019s pubkey>@<hostname>:<port>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now check Node 1's logs to make sure your callback ran."}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add an event stream subscription"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test that it works as expected"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);